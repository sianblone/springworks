<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
	
	<!-- StandardPBE... 클래스가 암호문을 복호화할 때 사용할 salt 키를 설정할 보조 클래스 -->
	<!-- 서버나 컴퓨터에 설정된 환경변수 값을 읽어서 salt로 사용하도록 만들기 -->
	<bean id="envConfig" class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		<property name="algorithm" value="PBEWithMD5AndDES" />
		<property name="passwordEnvName" value="ENV_PASS" />
	</bean>
	
	<!-- jasypt의 StandardPBE...Encryptor 클래스가 db.connection.properties 파일의 암호화된 문자열을 읽어서 복호화한 후 -->
	<!-- 일반 문자열로 변환하여 property로 사용할 수 있도록 도와주는 보조 클래스 -->
	<!-- 바로 집어넣어도 되지만 이 프로젝트에선 bean으로 만들어서 집어넣는 방법 선택 -->
	<bean id="encConvert" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="config" ref="envConfig"/>
	</bean>
	
	<!-- db.connection.properties로부터 username과 password를 가져와서 사용하기 위한 준비 -->
	<!-- 이 부분이 있어야 ${mysql.username}을 사용해서 불러올 수 있다 -->
	<!-- 가져온 암호화된 문자열을 평문으로 복호화한다 -->
	<bean class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
		<constructor-arg ref="encConvert"/>
		<property name="fileEncoding" value="UTF-8"/>
		<property name="locations">
			<list>
				<value>/WEB-INF/spring/properties/db.connection.properties</value>
				<value>/WEB-INF/spring/properties/gmail.connection.properties</value>
			</list>
		</property>
	</bean>

</beans>
